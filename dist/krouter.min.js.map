{"version":3,"sources":["krouter.js"],"names":["$","Router","routes","currentRoute","defaultRoute","container","options","accessControl","route","debug","autoInit","log","args","console","init","Object","assign","this","window","addEventListener","handleRoute","e","Error","stack","split","trim","preventDefault","path","handler","url","parseRoute","hash","location","substring","paramPairs","params","forEach","pair","key","value","async","keys","sort","reverse","i","length","match","RegExp","navigate","empty","componentEl","appendTo","komponent","data","error","paramString","entries","map","join","getCurrentRoute","krouter","document","ready","komponentor","jQuery"],"mappings":"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","file":"krouter.min.js","sourcesContent":["/**\n * Komponentor Router - Hash-based routing system\n * @module komponentor-router\n */\n\n(function($) {\n\n    const Router = {\n        routes: {},\n        currentRoute: null,\n        defaultRoute: null,\n        container: null,\n        options: {\n            accessControl: (route)=>true,\n            debug: false,\n            autoInit: true\n        }\n    };\n\n    // Logging utility\n    const log = (...args) => {\n        if (Router.options.debug) {\n            console.log('[KomponentorRouter]', ...args);\n        }\n    };\n\n    /**\n     * Initialize the router\n     * @param {Object} options Router configuration\n     * @param {string} options.container Container selector where components will be rendered\n     * @param {boolean} options.debug Enable debug logging\n     * @param {string} options.defaultRoute Default route when none specified\n     */\n    Router.init = function(options = {}) {\n        Object.assign(this.options, options);\n        \n        if (options.container) {\n            this.container = $(options.container);\n        }\n        \n        if (options.defaultRoute) {\n            this.defaultRoute = options.defaultRoute;\n        }\n\n        // Handle initial route\n        window.addEventListener('load', () => this.handleRoute());\n\n        // Handle route changes\n        window.addEventListener('hashchange', (e) => {\n           log('Route handler called from:', new Error().stack.split('\\n')[2].trim());\n\n            e.preventDefault();\n            this.handleRoute();\n        });\n\n        log('Router initialized', this.options);\n        return this;\n    };\n\n    /**\n     * Add a route handler\n     * @param {string} path Route path\n     * @param {Object|Function} handler Route handler or component config\n     */\n    Router.route = function(path, handler) {\n        if (typeof handler === 'string') {\n            // If handler is a string, treat it as a component URL\n            handler = { url: handler };\n        }\n\n        this.routes[path] = handler;\n        log('Route added', path, handler);\n        return this;\n    };\n\n    /**\n     * Parse the current hash location\n     * @returns {Object} Parsed route data\n     */\n    Router.parseRoute = function() {\n        const hash = window.location.hash.substring(1) || this.defaultRoute || '';\n        const [path, ...paramPairs] = hash.split('|');\n        const params = {};\n        \n        paramPairs.forEach(pair => {\n            const [key, value] = pair.split('=');\n            params[key] = value;\n        });\n\n        return {\n            path,\n            params,\n            hash: hash\n        };\n    };\n\n    /**\n     * Handle route change\n     */\n    Router.handleRoute = async function() {\n        const route = this.parseRoute();\n        \n        // Exit if hash hasn't changed from current route\n        if (this.currentRoute && this.currentRoute.hash === route.hash) {\n            log('Hash unchanged, skipping route handling');\n            return;\n        }\n\n        let handler = null;\n        const routes = Object.keys(this.routes).sort().reverse();\n        for(let i=0;i<routes.length;i++) {\n            if(route.path.match(new RegExp(\"^\"+routes[i]+\"$\"))) {\n                handler = this.routes[routes[i]];\n                break;\n            }\n        }\n\n        // Check access control if configured\n        if (this.options.accessControl) {\n            const isAllowed = await this.options.accessControl(route);\n            if (!isAllowed) {\n                log('Access denied for route', route.path);\n                return;\n            }\n        }\n        log('Handling route', route, handler);\n\n        if (!handler) {\n            log('No handler found for route', route.path);\n            if (this.defaultRoute && route.path !== this.defaultRoute) {\n                this.navigate(this.defaultRoute);\n            }\n            return;\n        }\n\n        try {\n            if (typeof handler === 'function') {\n                // Execute function handler\n                handler = await handler(route);\n                \n            } \n            log(\"handler\",handler);\n            if (typeof handler === 'object') {\n                // Load component\n                if (!this.container) {\n                    throw new Error('No container specified for component rendering');\n                }\n\n                // Clear previous component\n                this.container.empty();\n\n                // Create component element\n                const componentEl = $('<komponent>')\n                    .appendTo(this.container);\n\n                // Load component with route params\n                await componentEl.komponent({\n                    ...handler,\n                    data: {\n                        ...handler.data,\n                        ...route.params\n                    }\n                });\n            }\n\n            this.currentRoute = route;\n            log('Route handled successfully', route);\n        } catch (error) {\n            console.error('Error handling route:', error);\n        }\n    };\n\n    /**\n     * Navigate to a route\n     * @param {string} path Route path\n     * @param {Object} params Route parameters\n     */\n    Router.navigate = function(path, params = {}) {\n        const paramString = Object.entries(params)\n            .map(([key, value]) => `${key}=${value}`)\n            .join('|');\n\n        const hash = paramString ? `${path}|${paramString}` : path;\n        window.location.hash = hash;\n    };\n\n    /**\n     * Get current route information\n     * @returns {Object} Current route data\n     */\n    Router.getCurrentRoute = function() {\n        return this.currentRoute;\n    };\n\n    // Export router to global scope\n    window.krouter = Router;\n\n    // Auto-initialize if enabled\n    $(document).ready(() => {\n        // Wait for komponentor to be available\n        if (typeof window.komponentor === 'undefined') {\n            console.error('Komponentor not found. Make sure komponentor.modern.js is loaded first.');\n            return;\n        }\n\n        if (Router.options.autoInit) {\n            Router.init();\n        }\n    });\n\n})(jQuery); "]}